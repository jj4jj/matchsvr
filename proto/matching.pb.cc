// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matching.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "matching.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MatchingPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchingPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchingObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchingObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchingTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchingTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchedResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchedResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchingQueueMatcher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchingQueueMatcher_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchingWaitigTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchingWaitigTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchingBucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchingBucket_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchingQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchingQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matching_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matching_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchingConstValues_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_matching_2eproto() {
  protobuf_AddDesc_matching_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "matching.proto");
  GOOGLE_CHECK(file != NULL);
  MatchingPoint_descriptor_ = file->message_type(0);
  static const int MatchingPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingPoint, elo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingPoint, level_),
  };
  MatchingPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchingPoint_descriptor_,
      MatchingPoint::default_instance_,
      MatchingPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchingPoint));
  MatchingObject_descriptor_ = file->message_type(1);
  static const int MatchingObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingObject, point_),
  };
  MatchingObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchingObject_descriptor_,
      MatchingObject::default_instance_,
      MatchingObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchingObject));
  MatchingTeam_descriptor_ = file->message_type(2);
  static const int MatchingTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingTeam, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingTeam, join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingTeam, point_),
  };
  MatchingTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchingTeam_descriptor_,
      MatchingTeam::default_instance_,
      MatchingTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchingTeam));
  MatchedResult_descriptor_ = file->message_type(3);
  static const int MatchedResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedResult, teams_),
  };
  MatchedResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchedResult_descriptor_,
      MatchedResult::default_instance_,
      MatchedResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchedResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchedResult));
  MatchingQueueMatcher_descriptor_ = file->message_type(4);
  static const int MatchingQueueMatcher_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueueMatcher, team_elo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueueMatcher, team_id_),
  };
  MatchingQueueMatcher_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchingQueueMatcher_descriptor_,
      MatchingQueueMatcher::default_instance_,
      MatchingQueueMatcher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueueMatcher, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueueMatcher, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchingQueueMatcher));
  MatchingWaitigTeam_descriptor_ = file->message_type(5);
  static const int MatchingWaitigTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingWaitigTeam, teams_),
  };
  MatchingWaitigTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchingWaitigTeam_descriptor_,
      MatchingWaitigTeam::default_instance_,
      MatchingWaitigTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingWaitigTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingWaitigTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchingWaitigTeam));
  MatchingBucket_descriptor_ = file->message_type(6);
  static const int MatchingBucket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingBucket, waitings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingBucket, matchers_),
  };
  MatchingBucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchingBucket_descriptor_,
      MatchingBucket::default_instance_,
      MatchingBucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingBucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingBucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchingBucket));
  MatchingQueue_descriptor_ = file->message_type(7);
  static const int MatchingQueue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueue, team_member_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueue, buckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueue, cur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueue, cur_ms_insec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueue, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueue, fetched_results_),
  };
  MatchingQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchingQueue_descriptor_,
      MatchingQueue::default_instance_,
      MatchingQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchingQueue));
  Matching_descriptor_ = file->message_type(8);
  static const int Matching_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matching, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matching, mt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matching, mo_),
  };
  Matching_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Matching_descriptor_,
      Matching::default_instance_,
      Matching_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matching, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matching, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Matching));
  MatchingConstValues_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_matching_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchingPoint_descriptor_, &MatchingPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchingObject_descriptor_, &MatchingObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchingTeam_descriptor_, &MatchingTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchedResult_descriptor_, &MatchedResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchingQueueMatcher_descriptor_, &MatchingQueueMatcher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchingWaitigTeam_descriptor_, &MatchingWaitigTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchingBucket_descriptor_, &MatchingBucket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchingQueue_descriptor_, &MatchingQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Matching_descriptor_, &Matching::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_matching_2eproto() {
  delete MatchingPoint::default_instance_;
  delete MatchingPoint_reflection_;
  delete MatchingObject::default_instance_;
  delete MatchingObject_reflection_;
  delete MatchingTeam::default_instance_;
  delete MatchingTeam_reflection_;
  delete MatchedResult::default_instance_;
  delete MatchedResult_reflection_;
  delete MatchingQueueMatcher::default_instance_;
  delete MatchingQueueMatcher_reflection_;
  delete MatchingWaitigTeam::default_instance_;
  delete MatchingWaitigTeam_reflection_;
  delete MatchingBucket::default_instance_;
  delete MatchingBucket_reflection_;
  delete MatchingQueue::default_instance_;
  delete MatchingQueue_reflection_;
  delete Matching::default_instance_;
  delete Matching_reflection_;
}

void protobuf_AddDesc_matching_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_extensions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016matching.proto\032\020extensions.proto\":\n\rMa"
    "tchingPoint\022\013\n\003elo\030\001 \002(\r\022\r\n\005level\030\002 \001(\r:"
    "\r\202\265\030\tlevel,elo\"C\n\016MatchingObject\022\n\n\002id\030\001"
    " \002(\004\022\035\n\005point\030\002 \002(\0132\016.MatchingPoint:\006\202\265\030"
    "\002id\"s\n\014MatchingTeam\0221\n\007members\030\001 \003(\004B \222\265"
    "\030\034MATCHING_TEAM_MAX_MEMBER_NUM\022\021\n\tjoin_t"
    "ime\030\002 \002(\r\022\035\n\005point\030\003 \002(\0132\016.MatchingPoint"
    "\";\n\rMatchedResult\022*\n\005teams\030\001 \003(\004B\033\222\265\030\027MA"
    "TCHED_RESULT_TEAM_NUM\"O\n\024MatchingQueueMa"
    "tcher\022\020\n\010team_elo\030\001 \002(\r\022\017\n\007team_id\030\002 \002(\r"
    ":\024\202\265\030\020team_elo,team_id\"e\n\022MatchingWaitig"
    "Team\022O\n\005teams\030\001 \003(\0132\025.MatchingQueueMatch"
    "erB)\222\265\030%MACTCHING_BUCKET_MAX_WAITING_TEA"
    "M_NUM\"\266\001\n\016MatchingBucket\022W\n\010waitings\030\001 \003"
    "(\0132\023.MatchingWaitigTeamB0\222\265\030,MATCHING_TE"
    "AM_MAX_WAITING_MERGING_MEMBER_NUM\022K\n\010mat"
    "chers\030\002 \003(\0132\025.MatchingQueueMatcherB\"\222\265\030\036"
    "MATCHING_TEAM_MAX_NUM_IN_LEVEL\"\374\001\n\rMatch"
    "ingQueue\022\027\n\017team_member_num\030\001 \002(\r\022C\n\007buc"
    "kets\030\002 \003(\0132\017.MatchingBucketB!\222\265\030\035MACTCHI"
    "NG_QUEUE_MAX_LEVEL_NUM\022\020\n\010cur_time\030\003 \002(\r"
    "\022\024\n\014cur_ms_insec\030\004 \002(\r\022L\n\007results\030\005 \003(\0132"
    "\016.MatchedResultB+\222\265\030\'MACTCHING_QUEUE_MAX"
    "_MACTCHED_RESULT_NUM\022\027\n\017fetched_results\030"
    "\006 \001(\r\"]\n\010Matching\022\031\n\001q\030\001 \001(\0132\016.MatchingQ"
    "ueue\022\031\n\002mt\030\002 \001(\0132\r.MatchingTeam\022\033\n\002mo\030\003 "
    "\001(\0132\017.MatchingObject*\246\003\n\023MatchingConstVa"
    "lues\022 \n\034MATCHING_TEAM_MAX_MEMBER_NUM\020\003\0220"
    "\n,MATCHING_TEAM_MAX_WAITING_MERGING_MEMB"
    "ER_NUM\020\002\022#\n\036MATCHING_TEAM_MAX_NUM_IN_LEV"
    "EL\020\220N\022!\n\035MACTCHING_QUEUE_MAX_LEVEL_NUM\020\032"
    "\022\035\n\031MACTCHING_QUEUE_MAX_LEVEL\020\031\022,\n\'MACTC"
    "HING_QUEUE_MAX_MACTCHED_RESULT_NUM\020\220N\022\033\n"
    "\027MATCHED_RESULT_TEAM_NUM\020\002\022\031\n\025MATCHED_RE"
    "SULT_TEAM_L\020\000\022\031\n\025MATCHED_RESULT_TEAM_R\020\001"
    "\022*\n%MACTCHING_BUCKET_MAX_WAITING_TEAM_NU"
    "M\020\350\007\022#\n\035MATCHING_QUEUE_MAX_OBJECT_NUM\020\240\302"
    "\036\032\002\020\001", 1485);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "matching.proto", &protobuf_RegisterTypes);
  MatchingPoint::default_instance_ = new MatchingPoint();
  MatchingObject::default_instance_ = new MatchingObject();
  MatchingTeam::default_instance_ = new MatchingTeam();
  MatchedResult::default_instance_ = new MatchedResult();
  MatchingQueueMatcher::default_instance_ = new MatchingQueueMatcher();
  MatchingWaitigTeam::default_instance_ = new MatchingWaitigTeam();
  MatchingBucket::default_instance_ = new MatchingBucket();
  MatchingQueue::default_instance_ = new MatchingQueue();
  Matching::default_instance_ = new Matching();
  MatchingPoint::default_instance_->InitAsDefaultInstance();
  MatchingObject::default_instance_->InitAsDefaultInstance();
  MatchingTeam::default_instance_->InitAsDefaultInstance();
  MatchedResult::default_instance_->InitAsDefaultInstance();
  MatchingQueueMatcher::default_instance_->InitAsDefaultInstance();
  MatchingWaitigTeam::default_instance_->InitAsDefaultInstance();
  MatchingBucket::default_instance_->InitAsDefaultInstance();
  MatchingQueue::default_instance_->InitAsDefaultInstance();
  Matching::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_matching_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_matching_2eproto {
  StaticDescriptorInitializer_matching_2eproto() {
    protobuf_AddDesc_matching_2eproto();
  }
} static_descriptor_initializer_matching_2eproto_;
const ::google::protobuf::EnumDescriptor* MatchingConstValues_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingConstValues_descriptor_;
}
bool MatchingConstValues_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 25:
    case 26:
    case 1000:
    case 10000:
    case 500000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MatchingPoint::kEloFieldNumber;
const int MatchingPoint::kLevelFieldNumber;
#endif  // !_MSC_VER

MatchingPoint::MatchingPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingPoint)
}

void MatchingPoint::InitAsDefaultInstance() {
}

MatchingPoint::MatchingPoint(const MatchingPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchingPoint)
}

void MatchingPoint::SharedCtor() {
  _cached_size_ = 0;
  elo_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingPoint::~MatchingPoint() {
  // @@protoc_insertion_point(destructor:MatchingPoint)
  SharedDtor();
}

void MatchingPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchingPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchingPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingPoint_descriptor_;
}

const MatchingPoint& MatchingPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

MatchingPoint* MatchingPoint::default_instance_ = NULL;

MatchingPoint* MatchingPoint::New() const {
  return new MatchingPoint;
}

void MatchingPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchingPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(elo_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchingPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 elo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elo_)));
          set_has_elo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingPoint)
  return false;
#undef DO_
}

void MatchingPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingPoint)
  // required uint32 elo = 1;
  if (has_elo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elo(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingPoint)
}

::google::protobuf::uint8* MatchingPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingPoint)
  // required uint32 elo = 1;
  if (has_elo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->elo(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingPoint)
  return target;
}

int MatchingPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 elo = 1;
    if (has_elo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elo());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchingPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchingPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchingPoint::MergeFrom(const MatchingPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elo()) {
      set_elo(from.elo());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchingPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingPoint::CopyFrom(const MatchingPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MatchingPoint::Swap(MatchingPoint* other) {
  if (other != this) {
    std::swap(elo_, other->elo_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchingPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchingPoint_descriptor_;
  metadata.reflection = MatchingPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchingObject::kIdFieldNumber;
const int MatchingObject::kPointFieldNumber;
#endif  // !_MSC_VER

MatchingObject::MatchingObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingObject)
}

void MatchingObject::InitAsDefaultInstance() {
  point_ = const_cast< ::MatchingPoint*>(&::MatchingPoint::default_instance());
}

MatchingObject::MatchingObject(const MatchingObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchingObject)
}

void MatchingObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingObject::~MatchingObject() {
  // @@protoc_insertion_point(destructor:MatchingObject)
  SharedDtor();
}

void MatchingObject::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void MatchingObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchingObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingObject_descriptor_;
}

const MatchingObject& MatchingObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

MatchingObject* MatchingObject::default_instance_ = NULL;

MatchingObject* MatchingObject::New() const {
  return new MatchingObject;
}

void MatchingObject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_point()) {
      if (point_ != NULL) point_->::MatchingPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchingObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // required .MatchingPoint point = 2;
      case 2: {
        if (tag == 18) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingObject)
  return false;
#undef DO_
}

void MatchingObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingObject)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required .MatchingPoint point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingObject)
}

::google::protobuf::uint8* MatchingObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingObject)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required .MatchingPoint point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingObject)
  return target;
}

int MatchingObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required .MatchingPoint point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchingObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchingObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchingObject::MergeFrom(const MatchingObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_point()) {
      mutable_point()->::MatchingPoint::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchingObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingObject::CopyFrom(const MatchingObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void MatchingObject::Swap(MatchingObject* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchingObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchingObject_descriptor_;
  metadata.reflection = MatchingObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchingTeam::kMembersFieldNumber;
const int MatchingTeam::kJoinTimeFieldNumber;
const int MatchingTeam::kPointFieldNumber;
#endif  // !_MSC_VER

MatchingTeam::MatchingTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingTeam)
}

void MatchingTeam::InitAsDefaultInstance() {
  point_ = const_cast< ::MatchingPoint*>(&::MatchingPoint::default_instance());
}

MatchingTeam::MatchingTeam(const MatchingTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchingTeam)
}

void MatchingTeam::SharedCtor() {
  _cached_size_ = 0;
  join_time_ = 0u;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingTeam::~MatchingTeam() {
  // @@protoc_insertion_point(destructor:MatchingTeam)
  SharedDtor();
}

void MatchingTeam::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void MatchingTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchingTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingTeam_descriptor_;
}

const MatchingTeam& MatchingTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

MatchingTeam* MatchingTeam::default_instance_ = NULL;

MatchingTeam* MatchingTeam::New() const {
  return new MatchingTeam;
}

void MatchingTeam::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    join_time_ = 0u;
    if (has_point()) {
      if (point_ != NULL) point_->::MatchingPoint::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchingTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 members = 1;
      case 1: {
        if (tag == 8) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_members())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_members())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_members;
        if (input->ExpectTag(16)) goto parse_join_time;
        break;
      }

      // required uint32 join_time = 2;
      case 2: {
        if (tag == 16) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_point;
        break;
      }

      // required .MatchingPoint point = 3;
      case 3: {
        if (tag == 26) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingTeam)
  return false;
#undef DO_
}

void MatchingTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingTeam)
  // repeated uint64 members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->members(i), output);
  }

  // required uint32 join_time = 2;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->join_time(), output);
  }

  // required .MatchingPoint point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingTeam)
}

::google::protobuf::uint8* MatchingTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingTeam)
  // repeated uint64 members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->members(i), target);
  }

  // required uint32 join_time = 2;
  if (has_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->join_time(), target);
  }

  // required .MatchingPoint point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingTeam)
  return target;
}

int MatchingTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 join_time = 2;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_time());
    }

    // required .MatchingPoint point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  // repeated uint64 members = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchingTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchingTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchingTeam::MergeFrom(const MatchingTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
    if (from.has_point()) {
      mutable_point()->::MatchingPoint::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchingTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingTeam::CopyFrom(const MatchingTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void MatchingTeam::Swap(MatchingTeam* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(join_time_, other->join_time_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchingTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchingTeam_descriptor_;
  metadata.reflection = MatchingTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchedResult::kTeamsFieldNumber;
#endif  // !_MSC_VER

MatchedResult::MatchedResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchedResult)
}

void MatchedResult::InitAsDefaultInstance() {
}

MatchedResult::MatchedResult(const MatchedResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchedResult)
}

void MatchedResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchedResult::~MatchedResult() {
  // @@protoc_insertion_point(destructor:MatchedResult)
  SharedDtor();
}

void MatchedResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchedResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchedResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchedResult_descriptor_;
}

const MatchedResult& MatchedResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

MatchedResult* MatchedResult::default_instance_ = NULL;

MatchedResult* MatchedResult::New() const {
  return new MatchedResult;
}

void MatchedResult::Clear() {
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchedResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchedResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 teams = 1;
      case 1: {
        if (tag == 8) {
         parse_teams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_teams())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_teams())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_teams;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchedResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchedResult)
  return false;
#undef DO_
}

void MatchedResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchedResult)
  // repeated uint64 teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchedResult)
}

::google::protobuf::uint8* MatchedResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchedResult)
  // repeated uint64 teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchedResult)
  return target;
}

int MatchedResult::ByteSize() const {
  int total_size = 0;

  // repeated uint64 teams = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->teams_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->teams(i));
    }
    total_size += 1 * this->teams_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchedResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchedResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchedResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchedResult::MergeFrom(const MatchedResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchedResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchedResult::CopyFrom(const MatchedResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchedResult::IsInitialized() const {

  return true;
}

void MatchedResult::Swap(MatchedResult* other) {
  if (other != this) {
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchedResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchedResult_descriptor_;
  metadata.reflection = MatchedResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchingQueueMatcher::kTeamEloFieldNumber;
const int MatchingQueueMatcher::kTeamIdFieldNumber;
#endif  // !_MSC_VER

MatchingQueueMatcher::MatchingQueueMatcher()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingQueueMatcher)
}

void MatchingQueueMatcher::InitAsDefaultInstance() {
}

MatchingQueueMatcher::MatchingQueueMatcher(const MatchingQueueMatcher& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchingQueueMatcher)
}

void MatchingQueueMatcher::SharedCtor() {
  _cached_size_ = 0;
  team_elo_ = 0u;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingQueueMatcher::~MatchingQueueMatcher() {
  // @@protoc_insertion_point(destructor:MatchingQueueMatcher)
  SharedDtor();
}

void MatchingQueueMatcher::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchingQueueMatcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchingQueueMatcher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingQueueMatcher_descriptor_;
}

const MatchingQueueMatcher& MatchingQueueMatcher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

MatchingQueueMatcher* MatchingQueueMatcher::default_instance_ = NULL;

MatchingQueueMatcher* MatchingQueueMatcher::New() const {
  return new MatchingQueueMatcher;
}

void MatchingQueueMatcher::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchingQueueMatcher*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(team_elo_, team_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchingQueueMatcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingQueueMatcher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team_elo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_elo_)));
          set_has_team_elo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // required uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingQueueMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingQueueMatcher)
  return false;
#undef DO_
}

void MatchingQueueMatcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingQueueMatcher)
  // required uint32 team_elo = 1;
  if (has_team_elo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_elo(), output);
  }

  // required uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingQueueMatcher)
}

::google::protobuf::uint8* MatchingQueueMatcher::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingQueueMatcher)
  // required uint32 team_elo = 1;
  if (has_team_elo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_elo(), target);
  }

  // required uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingQueueMatcher)
  return target;
}

int MatchingQueueMatcher::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team_elo = 1;
    if (has_team_elo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_elo());
    }

    // required uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingQueueMatcher::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchingQueueMatcher* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchingQueueMatcher*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchingQueueMatcher::MergeFrom(const MatchingQueueMatcher& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_elo()) {
      set_team_elo(from.team_elo());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchingQueueMatcher::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingQueueMatcher::CopyFrom(const MatchingQueueMatcher& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingQueueMatcher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MatchingQueueMatcher::Swap(MatchingQueueMatcher* other) {
  if (other != this) {
    std::swap(team_elo_, other->team_elo_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchingQueueMatcher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchingQueueMatcher_descriptor_;
  metadata.reflection = MatchingQueueMatcher_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchingWaitigTeam::kTeamsFieldNumber;
#endif  // !_MSC_VER

MatchingWaitigTeam::MatchingWaitigTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingWaitigTeam)
}

void MatchingWaitigTeam::InitAsDefaultInstance() {
}

MatchingWaitigTeam::MatchingWaitigTeam(const MatchingWaitigTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchingWaitigTeam)
}

void MatchingWaitigTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingWaitigTeam::~MatchingWaitigTeam() {
  // @@protoc_insertion_point(destructor:MatchingWaitigTeam)
  SharedDtor();
}

void MatchingWaitigTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchingWaitigTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchingWaitigTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingWaitigTeam_descriptor_;
}

const MatchingWaitigTeam& MatchingWaitigTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

MatchingWaitigTeam* MatchingWaitigTeam::default_instance_ = NULL;

MatchingWaitigTeam* MatchingWaitigTeam::New() const {
  return new MatchingWaitigTeam;
}

void MatchingWaitigTeam::Clear() {
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchingWaitigTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingWaitigTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchingQueueMatcher teams = 1;
      case 1: {
        if (tag == 10) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_teams;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingWaitigTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingWaitigTeam)
  return false;
#undef DO_
}

void MatchingWaitigTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingWaitigTeam)
  // repeated .MatchingQueueMatcher teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingWaitigTeam)
}

::google::protobuf::uint8* MatchingWaitigTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingWaitigTeam)
  // repeated .MatchingQueueMatcher teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingWaitigTeam)
  return target;
}

int MatchingWaitigTeam::ByteSize() const {
  int total_size = 0;

  // repeated .MatchingQueueMatcher teams = 1;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingWaitigTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchingWaitigTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchingWaitigTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchingWaitigTeam::MergeFrom(const MatchingWaitigTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchingWaitigTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingWaitigTeam::CopyFrom(const MatchingWaitigTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingWaitigTeam::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->teams())) return false;
  return true;
}

void MatchingWaitigTeam::Swap(MatchingWaitigTeam* other) {
  if (other != this) {
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchingWaitigTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchingWaitigTeam_descriptor_;
  metadata.reflection = MatchingWaitigTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchingBucket::kWaitingsFieldNumber;
const int MatchingBucket::kMatchersFieldNumber;
#endif  // !_MSC_VER

MatchingBucket::MatchingBucket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingBucket)
}

void MatchingBucket::InitAsDefaultInstance() {
}

MatchingBucket::MatchingBucket(const MatchingBucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchingBucket)
}

void MatchingBucket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingBucket::~MatchingBucket() {
  // @@protoc_insertion_point(destructor:MatchingBucket)
  SharedDtor();
}

void MatchingBucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchingBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchingBucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingBucket_descriptor_;
}

const MatchingBucket& MatchingBucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

MatchingBucket* MatchingBucket::default_instance_ = NULL;

MatchingBucket* MatchingBucket::New() const {
  return new MatchingBucket;
}

void MatchingBucket::Clear() {
  waitings_.Clear();
  matchers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchingBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingBucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MatchingWaitigTeam waitings = 1;
      case 1: {
        if (tag == 10) {
         parse_waitings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waitings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_waitings;
        if (input->ExpectTag(18)) goto parse_matchers;
        break;
      }

      // repeated .MatchingQueueMatcher matchers = 2;
      case 2: {
        if (tag == 18) {
         parse_matchers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_matchers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingBucket)
  return false;
#undef DO_
}

void MatchingBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingBucket)
  // repeated .MatchingWaitigTeam waitings = 1;
  for (int i = 0; i < this->waitings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->waitings(i), output);
  }

  // repeated .MatchingQueueMatcher matchers = 2;
  for (int i = 0; i < this->matchers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matchers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingBucket)
}

::google::protobuf::uint8* MatchingBucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingBucket)
  // repeated .MatchingWaitigTeam waitings = 1;
  for (int i = 0; i < this->waitings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->waitings(i), target);
  }

  // repeated .MatchingQueueMatcher matchers = 2;
  for (int i = 0; i < this->matchers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matchers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingBucket)
  return target;
}

int MatchingBucket::ByteSize() const {
  int total_size = 0;

  // repeated .MatchingWaitigTeam waitings = 1;
  total_size += 1 * this->waitings_size();
  for (int i = 0; i < this->waitings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waitings(i));
  }

  // repeated .MatchingQueueMatcher matchers = 2;
  total_size += 1 * this->matchers_size();
  for (int i = 0; i < this->matchers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingBucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchingBucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchingBucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchingBucket::MergeFrom(const MatchingBucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  waitings_.MergeFrom(from.waitings_);
  matchers_.MergeFrom(from.matchers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchingBucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingBucket::CopyFrom(const MatchingBucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingBucket::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->waitings())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->matchers())) return false;
  return true;
}

void MatchingBucket::Swap(MatchingBucket* other) {
  if (other != this) {
    waitings_.Swap(&other->waitings_);
    matchers_.Swap(&other->matchers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchingBucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchingBucket_descriptor_;
  metadata.reflection = MatchingBucket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchingQueue::kTeamMemberNumFieldNumber;
const int MatchingQueue::kBucketsFieldNumber;
const int MatchingQueue::kCurTimeFieldNumber;
const int MatchingQueue::kCurMsInsecFieldNumber;
const int MatchingQueue::kResultsFieldNumber;
const int MatchingQueue::kFetchedResultsFieldNumber;
#endif  // !_MSC_VER

MatchingQueue::MatchingQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchingQueue)
}

void MatchingQueue::InitAsDefaultInstance() {
}

MatchingQueue::MatchingQueue(const MatchingQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchingQueue)
}

void MatchingQueue::SharedCtor() {
  _cached_size_ = 0;
  team_member_num_ = 0u;
  cur_time_ = 0u;
  cur_ms_insec_ = 0u;
  fetched_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingQueue::~MatchingQueue() {
  // @@protoc_insertion_point(destructor:MatchingQueue)
  SharedDtor();
}

void MatchingQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchingQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchingQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingQueue_descriptor_;
}

const MatchingQueue& MatchingQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

MatchingQueue* MatchingQueue::default_instance_ = NULL;

MatchingQueue* MatchingQueue::New() const {
  return new MatchingQueue;
}

void MatchingQueue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchingQueue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(team_member_num_, cur_time_);
  ZR_(cur_ms_insec_, fetched_results_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  buckets_.Clear();
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchingQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchingQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team_member_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_member_num_)));
          set_has_team_member_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buckets;
        break;
      }

      // repeated .MatchingBucket buckets = 2;
      case 2: {
        if (tag == 18) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buckets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buckets;
        if (input->ExpectTag(24)) goto parse_cur_time;
        break;
      }

      // required uint32 cur_time = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_time_)));
          set_has_cur_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_ms_insec;
        break;
      }

      // required uint32 cur_ms_insec = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_ms_insec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_ms_insec_)));
          set_has_cur_ms_insec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_results;
        break;
      }

      // repeated .MatchedResult results = 5;
      case 5: {
        if (tag == 42) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_results;
        if (input->ExpectTag(48)) goto parse_fetched_results;
        break;
      }

      // optional uint32 fetched_results = 6;
      case 6: {
        if (tag == 48) {
         parse_fetched_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetched_results_)));
          set_has_fetched_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchingQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchingQueue)
  return false;
#undef DO_
}

void MatchingQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchingQueue)
  // required uint32 team_member_num = 1;
  if (has_team_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_member_num(), output);
  }

  // repeated .MatchingBucket buckets = 2;
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buckets(i), output);
  }

  // required uint32 cur_time = 3;
  if (has_cur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_time(), output);
  }

  // required uint32 cur_ms_insec = 4;
  if (has_cur_ms_insec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_ms_insec(), output);
  }

  // repeated .MatchedResult results = 5;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->results(i), output);
  }

  // optional uint32 fetched_results = 6;
  if (has_fetched_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fetched_results(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchingQueue)
}

::google::protobuf::uint8* MatchingQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchingQueue)
  // required uint32 team_member_num = 1;
  if (has_team_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_member_num(), target);
  }

  // repeated .MatchingBucket buckets = 2;
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buckets(i), target);
  }

  // required uint32 cur_time = 3;
  if (has_cur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_time(), target);
  }

  // required uint32 cur_ms_insec = 4;
  if (has_cur_ms_insec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_ms_insec(), target);
  }

  // repeated .MatchedResult results = 5;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->results(i), target);
  }

  // optional uint32 fetched_results = 6;
  if (has_fetched_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fetched_results(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchingQueue)
  return target;
}

int MatchingQueue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team_member_num = 1;
    if (has_team_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_member_num());
    }

    // required uint32 cur_time = 3;
    if (has_cur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_time());
    }

    // required uint32 cur_ms_insec = 4;
    if (has_cur_ms_insec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_ms_insec());
    }

    // optional uint32 fetched_results = 6;
    if (has_fetched_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fetched_results());
    }

  }
  // repeated .MatchingBucket buckets = 2;
  total_size += 1 * this->buckets_size();
  for (int i = 0; i < this->buckets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buckets(i));
  }

  // repeated .MatchedResult results = 5;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchingQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchingQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchingQueue::MergeFrom(const MatchingQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  buckets_.MergeFrom(from.buckets_);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_member_num()) {
      set_team_member_num(from.team_member_num());
    }
    if (from.has_cur_time()) {
      set_cur_time(from.cur_time());
    }
    if (from.has_cur_ms_insec()) {
      set_cur_ms_insec(from.cur_ms_insec());
    }
    if (from.has_fetched_results()) {
      set_fetched_results(from.fetched_results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchingQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingQueue::CopyFrom(const MatchingQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingQueue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->buckets())) return false;
  return true;
}

void MatchingQueue::Swap(MatchingQueue* other) {
  if (other != this) {
    std::swap(team_member_num_, other->team_member_num_);
    buckets_.Swap(&other->buckets_);
    std::swap(cur_time_, other->cur_time_);
    std::swap(cur_ms_insec_, other->cur_ms_insec_);
    results_.Swap(&other->results_);
    std::swap(fetched_results_, other->fetched_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchingQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchingQueue_descriptor_;
  metadata.reflection = MatchingQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Matching::kQFieldNumber;
const int Matching::kMtFieldNumber;
const int Matching::kMoFieldNumber;
#endif  // !_MSC_VER

Matching::Matching()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Matching)
}

void Matching::InitAsDefaultInstance() {
  q_ = const_cast< ::MatchingQueue*>(&::MatchingQueue::default_instance());
  mt_ = const_cast< ::MatchingTeam*>(&::MatchingTeam::default_instance());
  mo_ = const_cast< ::MatchingObject*>(&::MatchingObject::default_instance());
}

Matching::Matching(const Matching& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Matching)
}

void Matching::SharedCtor() {
  _cached_size_ = 0;
  q_ = NULL;
  mt_ = NULL;
  mo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Matching::~Matching() {
  // @@protoc_insertion_point(destructor:Matching)
  SharedDtor();
}

void Matching::SharedDtor() {
  if (this != default_instance_) {
    delete q_;
    delete mt_;
    delete mo_;
  }
}

void Matching::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matching::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matching_descriptor_;
}

const Matching& Matching::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matching_2eproto();
  return *default_instance_;
}

Matching* Matching::default_instance_ = NULL;

Matching* Matching::New() const {
  return new Matching;
}

void Matching::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_q()) {
      if (q_ != NULL) q_->::MatchingQueue::Clear();
    }
    if (has_mt()) {
      if (mt_ != NULL) mt_->::MatchingTeam::Clear();
    }
    if (has_mo()) {
      if (mo_ != NULL) mo_->::MatchingObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Matching::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Matching)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MatchingQueue q = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_q()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mt;
        break;
      }

      // optional .MatchingTeam mt = 2;
      case 2: {
        if (tag == 18) {
         parse_mt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mo;
        break;
      }

      // optional .MatchingObject mo = 3;
      case 3: {
        if (tag == 26) {
         parse_mo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Matching)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Matching)
  return false;
#undef DO_
}

void Matching::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Matching)
  // optional .MatchingQueue q = 1;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->q(), output);
  }

  // optional .MatchingTeam mt = 2;
  if (has_mt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mt(), output);
  }

  // optional .MatchingObject mo = 3;
  if (has_mo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Matching)
}

::google::protobuf::uint8* Matching::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Matching)
  // optional .MatchingQueue q = 1;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->q(), target);
  }

  // optional .MatchingTeam mt = 2;
  if (has_mt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mt(), target);
  }

  // optional .MatchingObject mo = 3;
  if (has_mo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Matching)
  return target;
}

int Matching::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MatchingQueue q = 1;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->q());
    }

    // optional .MatchingTeam mt = 2;
    if (has_mt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mt());
    }

    // optional .MatchingObject mo = 3;
    if (has_mo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matching::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Matching* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Matching*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Matching::MergeFrom(const Matching& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_q()) {
      mutable_q()->::MatchingQueue::MergeFrom(from.q());
    }
    if (from.has_mt()) {
      mutable_mt()->::MatchingTeam::MergeFrom(from.mt());
    }
    if (from.has_mo()) {
      mutable_mo()->::MatchingObject::MergeFrom(from.mo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Matching::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matching::CopyFrom(const Matching& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matching::IsInitialized() const {

  if (has_q()) {
    if (!this->q().IsInitialized()) return false;
  }
  if (has_mt()) {
    if (!this->mt().IsInitialized()) return false;
  }
  if (has_mo()) {
    if (!this->mo().IsInitialized()) return false;
  }
  return true;
}

void Matching::Swap(Matching* other) {
  if (other != this) {
    std::swap(q_, other->q_);
    std::swap(mt_, other->mt_);
    std::swap(mo_, other->mo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Matching::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matching_descriptor_;
  metadata.reflection = Matching_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
